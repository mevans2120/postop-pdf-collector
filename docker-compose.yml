version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: postop-db
    environment:
      POSTGRES_USER: postop
      POSTGRES_PASSWORD: postop_password
      POSTGRES_DB: postop_collector
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postop"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - postop-network

  # PostOp PDF Collector API
  api:
    build: .
    container_name: postop-api
    environment:
      DATABASE_URL: postgresql://postop:postop_password@postgres:5432/postop_collector
      ENVIRONMENT: production
      API_HOST: 0.0.0.0
      API_PORT: 8000
      LOG_LEVEL: INFO
      # Google API credentials (set these)
      # GOOGLE_API_KEY: your_key_here
      # GOOGLE_SEARCH_ENGINE_ID: your_id_here
    volumes:
      - ./data:/app/data
      - ./output:/app/output
      - ./logs:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - postop-network
    restart: unless-stopped

  # Redis Cache (optional)
  redis:
    image: redis:7-alpine
    container_name: postop-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - postop-network
    restart: unless-stopped

  # Nginx Reverse Proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: postop-nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - api
    networks:
      - postop-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  postop-network:
    driver: bridge